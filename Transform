class transform:
    # return the first n records from the dataset
    def head(self, dataset, step):
        if not dataset:
            raise Exception("Dataset cannot be empty.")
        if step < 1:
            raise Exception("The step value must be positive.")
        return dataset[0: step]
    
    
    #return the last n records from the dataset
    def tail(self, dataset, step):
        if not dataset:
            raise Exception("Dataset cannot be empty.")
        if step < 1:
            raise Exception("The step value must be positive.")
        return dataset[len(dataset) - step: len(dataset)]
        
    #rename a column in the dataset
    def rename_attribute(self, dataset, attribute, new_attribute):
        if not dataset:
            raise Exception("Dataset cannot be empty.")
        if not attribute:
            raise Exception("The attribute key must be a valid key.")
        new_dataset = []
        for row in dataset:
            if attribute in row.keys():
                val = row[attribute]
                new_row = row.copy()
                del new_row[attribute]
                new_row[new_attribute] = val
                new_dataset.append(new_row)
            else:
                raise Exception("Operation is not possibul because the column " + str(column_name) + " does not exist in one \
                of the rows in the dataset.")
        return new_dataset

    #remove a column from the dataset
    def remove_attribute(self, dataset, attribute):
        new_dataset = []
        for row in dataset:
            new_row = row
            if attribute in new_row.keys():
                del new_row[attribute]
                new_dataset.append(new_row)
        return new_dataset
                
    #rename a list of columns in the dataset
    def rename_attributes(self, dataset, attributes, new_attributes):
        if not attributes or not new_attributes:
            raise Exception("The attributes cannot be empty.")
        if len(attributes) != len(new_attributes):
            raise Exception("The number of new column names must match the number of existing column names.")
        new_dataset = []
        for row in dataset:
            new_row = row
            for i in range(0, len(attributes)):
                attribute = attributes[i]
                new_attribute = new_attributes[i]
                if attribute in new_row.keys():
                    val = new_row[attribute]
                    del new_row[attribute]
                    new_row[new_attribute] = val
                else:
                    raise Exception("Operation is not possible because the key " + str(key)+ " does not exist \
                    in one of the rows in the dataset.")
            new_dataset.append(new_row)
        return new_dataset
        
    
    #remove a list of columns in the dataset
    def remove_attributes(self, dataset, attributes): 
        if not dataset:
            raise Exception("Dataset cannot be empty")
        if not attributes:
            raise Exception("The list of attributes cannot be empty.")
        new_dataset = []
        for row in dataset:
            new_row = row
            for attribute in attributes:
                if attribute in new_row.keys():
                    del new_row[attribute]
            new_dataset.append(new_row)
        return new_dataset
    
    def transform(self, dataset, attribute, new_attribute, transform_function, *args):
        # The final step in the transform process is to make changes to the data so that the data
        # meets the needs of the target database. This can include transformations like:
        # • Rounding numeric values
        # • Changing the case of string values
        # • Concatenating string values
        # • Deconstructing strings or datetime values
        # • Removing out-of-range values, such as nulls or values that are too high or too low
        #   for the target specifications
        # • Converting strings to numbers or vice versa
        
        #  Note the use of the *args argument here, which allows the script to handle any number of values in the named column.

        if not dataset:
            raise Exception("Dataset cannot be empty.")
        if not attribute or not new_attribute:
            raise Exception("The input attribute cannot be empty.")
        if not transform_function:
            raise Exception("The transform_function cannot be None.")
        new_dataset = []
        for row in dataset:
            t = transform_function(row[attribute], *args)
            z = row.copy()
            z.update({new_attribute: t})
            new_dataset.append(z)
        return new_dataset
    
    
